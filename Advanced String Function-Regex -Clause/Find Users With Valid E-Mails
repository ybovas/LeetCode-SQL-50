1517. Find Users With Valid E-Mails

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
| mail          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
This table contains information of the users signed up in a website. Some e-mails are invalid.
 

Write a solution to find the users who have valid emails.

A valid e-mail has a prefix name and a domain where:

The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. The prefix name must start with a letter.
The domain is '@leetcode.com'.
Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Users table:
+---------+-----------+-------------------------+
| user_id | name      | mail                    |
+---------+-----------+-------------------------+
| 1       | Winston   | winston@leetcode.com    |
| 2       | Jonathan  | jonathanisgreat         |
| 3       | Annabelle | bella-@leetcode.com     |
| 4       | Sally     | sally.come@leetcode.com |
| 5       | Marwan    | quarz#2020@leetcode.com |
| 6       | David     | david69@gmail.com       |
| 7       | Shapiro   | .shapo@leetcode.com     |
+---------+-----------+-------------------------+
Output: 
+---------+-----------+-------------------------+
| user_id | name      | mail                    |
+---------+-----------+-------------------------+
| 1       | Winston   | winston@leetcode.com    |
| 3       | Annabelle | bella-@leetcode.com     |
| 4       | Sally     | sally.come@leetcode.com |
+---------+-----------+-------------------------+
Explanation: 
The mail of user 2 does not have a domain.
The mail of user 5 has the # sign which is not allowed.
The mail of user 6 does not have the leetcode domain.
The mail of user 7 starts with a period.


------------------------------------------------------------------------------------------------------

 ## Solution ##

SELECT *
FROM Users 
WHERE mail  LIKE '[a-zA-Z]%@leetcode.com'
AND mail NOT LIKE '%[^a-zA-Z0-9_.-]%@leetcode.com'



--------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT *
FROM users
WHERE mail LIKE '[a-zA-Z]%'                                 -- starts with a letter
  AND mail COLLATE Latin1_General_CS_AS LIKE '%@leetcode.com' -- ends with @leetcode.com (case-sensitive)
  AND LEFT(mail, LEN(mail) - LEN('@leetcode.com')) 
        NOT LIKE '%[^a-zA-Z0-9_.-]%';                       -- before @ only letters, digits, underscore, dot, dash
--------------------------------------------------------------------------------------------------------------------------------------------------------------

✅ Explanation

LIKE '[a-zA-Z]%'
Makes sure the first character is a letter (A–Z or a–z).

mail COLLATE Latin1_General_CS_AS LIKE '%@leetcode.com'
Ensures the domain is exactly @leetcode.com, with case sensitivity (CS in collation).
Without the collation, SQL Server’s default is case-insensitive, so @LeetCode.com would also match.

LEFT(mail, LEN(mail) - LEN('@leetcode.com')) NOT LIKE '%[^a-zA-Z0-9_.-]%'

Takes everything before @leetcode.com.

Rejects any string that contains characters outside [A-Za-z0-9_.-].

⚠️ Small tip: if you don’t care about case sensitivity on the domain part, you can drop the COLLATE:

AND mail LIKE '%@leetcode.com'


------------------------------------------------------------------------------------------------------


