1341. Movie Rating

Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.
 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
The column 'name' has unique values.
Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 

Write a solution to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.

 

Example 1:

Input: 
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+
Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+
Explanation: 
Daniel and Monica have rated 3 movies ("Avengers", "Frozen 2" and "Joker") but Daniel is smaller lexicographically.
Frozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.


------------------------------------------------------------------------------------------------------

 ## Solution ##

Method 1:


select *
from 
(
    select top 1 U.name as results
    from 
        MovieRating MR 
        left join Users U on U.user_id = MR.user_id
    group by
        MR.user_id, U.name
    order by
        COUNT( MR.movie_id) desc, U.name
) N
union all 
select *
from 
(
    select  top 1 M.title as results
    from 
        MovieRating MR 
        left join Movies M on M.movie_id = MR.movie_id
    where 
        MR.created_at between '2020-02-01' and '2020-02-29' 
    order by
        AVG(MR.rating*1.0) over(partition by M.title) desc, M.title asc
) N2


------------------------------------------------------------------------------------------------

Method :2

With T1 as (
Select top 1 B.name, count(1) ranking
from
MovieRating A left join Users B on A.user_id = B.user_id
left join Movies C on A.movie_id = C.movie_id 
group by B.name
order by ranking desc, B.name asc
),

T2 as (

Select top 1 C.title as results, round(avg(A.rating*1.0),2) avg_rating
from
MovieRating A left join Users B on A.user_id = B.user_id
left join Movies C on A.movie_id = C.movie_id
where A.created_at between '2020-02-01' and '2020-02-28'
group by C.title
order by avg_rating desc, C.title
)

Select Name as results from T1
union all
Select results from T2


------------------------------------------------------------------------------------------------------
